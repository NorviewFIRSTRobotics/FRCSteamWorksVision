#!/usr/bin/python3

"""
Simple skeleton program for running an OpenCV pipeline generated by GRIP and using NetworkTables to send data.

Users need to:

1. Import the generated GRIP pipeline, which should be generated in the same directory as this file.
2. Set the network table server IP. This is usually the robots address (roborio-TEAM-frc.local) or localhost
3. Handle putting the generated code into NetworkTables
"""

import cv2
from networktables import NetworkTable
from grip import GripPipeline  # TODO change the default module and class, if needed
from conversion import Angles

def extra_processing(pipeline: GripPipeline):
    """
    Performs extra processing on the pipeline's outputs and publishes data to NetworkTables.
    :param pipeline: the pipeline that just processed an image
    :return: None
    """
    # TODO: Users need to implement this.
    # Useful for converting OpenCV objects (e.g. contours) to something NetworkTables can understand.

    converter = Angles()

    (imgx,imgy) = pipeline.get_mat_info_size

    center_x_positions = []
    center_y_positions = []
    widths = []
    heights = []

    x_angles = []
    y_angles = []
    dists = []


    for contour in pipeline.filter_contours_output:
        x, y, w, h = cv2.boundingRect(contour)
        center_x_positions.append(x + w / 2)  # X and Y are coordinates of the top-left corner of the bounding box
        center_y_positions.append(y + h / 2)
        widths.append(w)
        heights.append(y)

        x_angles.append(converter.x_angle(x + w / 2))
        y_angles.append(converter.y_angle(y + h / 2))
        dists.append(converter.dist(y + h / 2))


        table = NetworkTable.getTable('/GRIP/preprocessed')
        table.putNumberArray('x', center_x_positions)
        table.putNumberArray('y', center_y_positions)
        table.putNumberArray('width', widths)
        table.putNumberArray('height', heights)
        table.putNumberArray('x angles', x_angles)
        table.putNumberArray('y angles', y_angles)
        table.putNumberArray('distances', dists)


def main():
    NetworkTable.setTeam(5587)  # TODO set your team number
    NetworkTable.setClientMode()
    NetworkTable.setIPAddress('10.55.87.20') # TODO switch to RIO IP
    NetworkTable.initialize()
    cap = cv2.VideoCapture(0)
    pipeline = GripPipeline()
    while True:
        ret, frame = cap.read()
        if ret:
            pipeline.process(frame)  # TODO add extra parameters if the pipeline takes more than just a single image
            extra_processing(pipeline)


if __name__ == '__main__':
    main()
